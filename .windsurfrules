# .windsurfrules

# WINDSURF RULES (JavaScript Edition) 

# 🔄 Project Awareness & Context #
Always read PLANNING.md at the start of a new conversation to understand architecture, goals, style, and constraints.

Check TASK.md before starting a new task. If the task isn’t listed, add it with a brief description and today’s date.

Consult the Context7 MCP server (internal knowledge-base) before introducing any external API, npm package, LangChain/LangGraph component, or architectural pattern. Document the MCP link or note in the PR / task comment.

Follow the naming conventions, folder layout, and patterns described in PLANNING.md.

# 🧱 Code Structure & Modularity #
Never create a file longer than 500 lines (including comments). When a file approaches the limit, split it into helper modules.

Organise code into clear feature folders inside src/ (e.g. core/, tools/, graph/, routes/).

Use CommonJS (require / module.exports) imports for consistency with existing code.

Favour single-purpose functions and keep side-effects isolated (e.g. DB or Telegram actions live in tools/).

# 🧪 Testing & Reliability #
Key Principle**
*Prioritize simplicity in tests. While maintaining good coverage and verifying essential functionality, we will actively avoid overly complex test setups, excessive mocking, or testing intricate implementation details where simpler assertions suffice.

Always create Mocha unit tests (mocha, chai, sinon, supertest) for every new function, class, or route.

After changing logic, update or extend existing tests.

Tests live in /tests, mirroring the main folder structure. Each new feature needs:

1 “happy-path” test

1 edge-case test

1 failure / error-path test

Run tests with npm test; a change is not done until tests pass and coverage ≥ 90 %.

## 1 Error-Handling Assertions
1.1 Implementation code must propagate the underlying error text, e.g.
throw new Error(`Agent execution failed: ${err.message}`);

1.2 Tests assert on the dynamic part with regex:
await expect(runBookingAgent()).to.be.rejectedWith(/Agent execution failed: .+/);
 

## 2 Logger / Spy Assertions  
2.1 Always match *both* positional arguments:  
```js
expect(logger.error)
  .to.have.been.calledWith(sinon.match.object, 'human-readable message');
```   

2.2 Prefer `sinon.match.*` helpers to brittle string regexes. 

## 3 Mock & Stub Hygiene  
3.1 Create **all** fakes inside `beforeEach` *or* a Sinon sandbox; never at module scope.  
3.2 Restore via `sandbox.verifyAndRestore()` in `afterEach` to catch leaks early.  
3.3 If the SUT caches dependencies (e.g., `initializeNodes`), inject brand-new mocks every test.

## 4 Isolation  
Debug flow:

--bail to stop on first failure.

it.only() or --grep to narrow scope. 


## 5 Dependency Injection
5.1 All modules expose initialize(deps); tests pass stubs, prod passes singletons. 

5.2 Absolutely no require()-time side-effects outside initializers.

## 6 Coverage Gates
6.1 nyc check-coverage --lines 90 --branches 80 runs in CI; build fails if below thresholds. 


6.2 For legacy code < threshold, mark files /* istanbul ignore file */ and create a ticket.

## 7 Time-Sensitive Code
7.1 Use sinon.useFakeTimers() per test and advance explicitly; restore in afterEach. 


# ✅ Task Completion # 
Tick the box in TASK.md immediately after finishing a task.

Add any new sub-tasks or TODOs discovered during work under “Discovered During Work” in TASK.md.

📎 Style & Conventions
Language: modern JavaScript (ES2020+) – no TypeScript for now.

Formatting: use prettier + eslint:recommended; run on commit hooks.

Docs: write JSDoc for every exported function (Google style):

/**
 * Brief summary.
 *
 * @param {number} a - description
 * @returns {number} description
 */
function add(a) { ... }

Environment: load with dotenv in core/env.js, validate required vars.

Database: use the singleton Prisma client exported from core/prisma.js.

HTTP: Express router modules in routes/; keep each router file < 300 lines.

Bot: Telegraf instance is exported from core/bot.js.

LLM / LangChain: place LangChain tools in tools/ and graphs in graph/. Consult Context7 MCP for best-practice patterns first.

# 📚 Documentation & Explainability #
Update README.md when features, setup steps, or dependencies change.

Comment non-obvious logic and add a // Reason: line when intent isn’t obvious.

Keep docs/architecture.md up-to-date with diagrams after each phase.

# 🧠 AI Behaviour Rules # 
Never assume missing context – ask clarifying questions.

Never hallucinate libraries or functions; only use packages verified in Context7 MCP and/or already listed in package.json.

Always confirm file paths and module names exist before referencing them.

Never delete or overwrite code unless it’s part of the active task in TASK.md.

# ⏩ Workflow Summary # 
Read PLANNING.md → Read / update TASK.md.

Consult Context7 MCP for any new dependency or API.

Write code in src/, keep files ≤ 500 lines, add helpful comments.

Add tests in tests/, run npm test until green.

Tick task in TASK.md, document surprises, update docs if needed.

Commit with descriptive message following Conventional Commits (feat:, fix:, etc.).

# Happy coding :)